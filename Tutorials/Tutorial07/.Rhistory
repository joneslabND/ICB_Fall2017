temp=rateVfate(zbar=zbars[j],WA2LA=WA2LAs[i])	# solve for equilbria
equilC[i,j]=temp$Cconc				# equilibrium DOC concentration [g m-3]
fracEvap[i,j]=temp$fracEvap		# fraction of hydrologic loss that is evap
respiration[i,j]=temp$resp			# daily respiration [g day-1]
respirationVol[i,j]=temp$respVol	# daily volumetric respiration [g m-3 day-1]
Cload[i,j]=temp$Cload				# daily carbon load [g day-1]
fracCresp[i,j]=temp$fracCresp		# fraction of loaded C that is respired
RT[i,j]=temp$RT					# residence time [day]
Qout[i,j]=temp$Qout				# outflow [m3 day-1]
}
}
RTNE=matrix(NA,length(WA2LAs),length(zbars))
fracEvapNE=RT
fracCrespNE=RT
respirationNE=RT
respirationVolNE=RT
CloadNE=RT
fracCrespNE=RT
QoutNE=RT
equilCNE=RT
# loop over gradients in factorial manner
for(i in 1:length(WA2LAs)){
for(j in 1:length(zbars)){
temp=rateVfate(zbar=zbars[j],WA2LA=WA2LAs[i],evap=0)
equilCNE[i,j]=temp$Cconc				# equilibrium DOC concentration [g m-3]
fracEvapNE[i,j]=temp$fracEvap		# fraction of hydrologic loss that is evap
respirationNE[i,j]=temp$resp			# daily respiration [g day-1]
respirationVolNE[i,j]=temp$respVol	# daily volumetric respiration [g m-3 day-1]
CloadNE[i,j]=temp$Cload				# daily carbon load [g day-1]
fracCrespNE[i,j]=temp$fracCresp		# fraction of loaded C that is respired
RTNE[i,j]=temp$RT					# residence time [day]
QoutNE[i,j]=temp$Qout				# outflow [m3 day-1]
}
}
#### (3) simulate over ranges of WA2LAs, zbars and inflow DOC concentrations
DOCins=seq(5,40,5)		# fluvial total DOC concentrations considered [g C m-3]
# 3-dimensional array to store equilibrium values
RT3=array(NA,dim=c(length(WA2LAs),length(DOCins),length(zbars)))
fracEvap3=RT3
fracCresp3=RT3
respiration3=RT3
respirationVol3=RT3
Cload3=RT3
fracCresp3=RT3
Qout3=RT3
equilC3=RT3
# loop over gradients in factorial manner
for(i in 1:length(WA2LAs)){
for(j in 1:length(DOCins)){
for(k in 1:length(zbars)){
temp=rateVfate(zbar=zbars[k],WA2LA=WA2LAs[i],Cq=DOCins[j])
equilC3[i,j,k]=temp$Cconc				# equilibrium DOC concentration [g m-3]
fracEvap3[i,j,k]=temp$fracEvap		# fraction of hydrologic loss that is evap
respiration3[i,j,k]=temp$resp			# daily respiration [g day-1]
respirationVol3[i,j,k]=temp$respVol	# daily volumetric respiration [g m-3 day-1]
Cload3[i,j,k]=temp$Cload				# daily carbon load [g day-1]
fracCresp3[i,j,k]=temp$fracCresp		# fraction of loaded C that is respired
RT3[i,j,k]=temp$RT					# residence time [day]
Qout3[i,j,k]=temp$Qout				# outflow [m3 day-1]
}
}
}
fLs=seq(0.5,0,-0.01)		# fractions Labile considered
# 3-dimensional arrays to store output from simulations along gradients of drainage ratio, mean depth, and fraction labile
RT3q=array(NA,dim=c(length(WA2LAs),length(fLs),length(zbars)))
fracEvap3q=RT3q
fracCresp3q=RT3q
respiration3q=RT3q
respirationVol3q=RT3q
Cload3q=RT3q
fracCresp3q=RT3q
Qout3q=RT3q
equilC3q=RT3q
# loops to simulate across all gradients in a factorial manner
for(i in 1:length(WA2LAs)){
for(j in 1:length(fLs)){
for(k in 1:length(zbars)){
temp=rateVfate(zbar=zbars[k],WA2LA=WA2LAs[i],fLabile=fLs[j])
equilC3q[i,j,k]=temp$Cconc				# equilibrium DOC concentration [g m-3]
fracEvap3q[i,j,k]=temp$fracEvap		# fraction of hydrologic loss that is evap
respiration3q[i,j,k]=temp$resp			# daily respiration [g day-1]
respirationVol3q[i,j,k]=temp$respVol	# daily volumetric respiration [g m-3 day-1]
Cload3q[i,j,k]=temp$Cload				# daily carbon load [g day-1]
fracCresp3q[i,j,k]=temp$fracCresp		# fraction of loaded C that is respired
RT3q[i,j,k]=temp$RT					# residence time [day]
Qout3q[i,j,k]=temp$Qout				# outflow [m3 day-1]
}
}
}
plot(WA2LAs,RT[,1],type='l',xlab="log10(WA:LA)",ylab="log10(residence time) (days)",ylim=c(1,max(RT)),log="xy",lwd=2,col='grey90')
lines(WA2LAs,RT[,2],lwd=2,col='grey70')
lines(WA2LAs,RT[,5],lwd=2,col='grey55')
lines(WA2LAs,RT[,10],lwd=2,col='grey40')
lines(WA2LAs,RT[,15],lwd=2)
legend('bottomleft',legend=c(1,2,5,10,15),lty=1,col=c('grey90','grey70','grey55','grey40','black'),box.lty=0)
text(1,10,'mean depth (m)',font=4)
plot(WA2LAs,Cload[,1]/10000,type='l',xlab="WA:LA",ylab="carbon load (g m-2 day-1)",ylim=c(0,max(Cload/10000)))
# c) equilibrium C concentration
plot(WA2LAs,equilC[,1],type='l',xlab="WA:LA",ylab="equilibrium carbon concentration (g m-3)",ylim=c(0,max(equilC)),lwd=2,col='grey95')
lines(WA2LAs,equilC[,2],lwd=2,col='grey70')
lines(WA2LAs,equilC[,5],lwd=2,col='grey55')
lines(WA2LAs,equilC[,10],lwd=2,col='grey40')
lines(WA2LAs,equilC[,15],lwd=2)
legend('bottomright',legend=c(1,2,5,10,15),lty=1,col=c('grey90','grey70','grey55','grey40','black'),box.lty=0)
text(900,1.4,'mean depth (m)',font=4)
plot(log10(WA2LAs*7.917808*1000/10000),log10(1/RT[,1]),xlab="Areal hydraulic load (L m-2 d-1)",ylab="flushign rate (day-1)",xlim=c(0,3),type='l',ylim=c(-4,0),lwd=2,col='grey90')
lines(log10(WA2LAs*7.917808*1000/10000),log10(1/RT[,2]),lwd=2,col='grey70')
lines(log10(WA2LAs*7.917808*1000/10000),log10(1/RT[,5]),lwd=2,col='grey55')
lines(log10(WA2LAs*7.917808*1000/10000),log10(1/RT[,10]),lwd=2,col='grey40')
lines(log10(WA2LAs*7.917808*1000/10000),log10(1/RT[,15]))
lines(log10(seq(1,1000,10)),log10(0.0001*seq(1,1000,10)^1.084),col='red')	# model fit from Brett et al.
legend('topleft',legend=c(1,2,5,10,15,"Brett et al."),lty=1,col=c('grey90','grey70','grey55','grey40','black','red'),box.lty=0)
plot(log10(WA2LAs*7.917808*1000/10000),log10(Cload[,1]/10000*1000),type='l',xlab="Areal hydraulic load (L m-2 d-1)",ylab="carbon load (mg m-2 day-1)",xlim=c(0,3),lwd=2)
lines(log10(seq(1,1000,10)),log10(8.37*seq(1,1000,10)^0.982),lwd=2,col='red')
legend('topleft',c('this study','Brett et al. 2012'),lty=1,col=c('black','red'),box.lty=0)
plot(WA2LAs,fracEvap[,1],type='l',xlab="WA:LA",ylab="fraction evap",ylim=c(0,1),log="x",lwd=2)		# all lines are on top of eachother
plot(Qout[,1],QoutNE[,1],type='l',log="xy",xlim=c(1,10000),ylim=c(1,10000),xlab="Qout - With evaporation",ylab="Qout - No evaporation",lwd=2)
arrows(x0=Qout[(nrow(Qout)-4),1],y0=QoutNE[(nrow(QoutNE)-4),1],x1=Qout[nrow(Qout),1],y1=QoutNE[nrow(QoutNE),1],lwd=2)
abline(a=0,b=1,lty=5)
plot(equilC[,1],equilCNE[,1],type='l',xlim=c(0,5),ylim=c(0,5),xlab="Equilibrium C - With evaporation",ylab="Equilibrium C - No evaporation",lwd=2,col='grey')
arrows(x0=equilC[(nrow(equilC)-50),1],y0=equilCNE[(nrow(equilCNE)-50),1],x1=equilC[nrow(equilC),1],y1=equilCNE[nrow(equilCNE),1],lwd=2,col='grey')
lines(equilC[,15],equilCNE[,15],lwd=2)
arrows(x0=equilC[(nrow(equilC)-50),15],y0=equilCNE[(nrow(equilCNE)-50),15],x1=equilC[nrow(equilC),15],y1=equilCNE[nrow(equilCNE),15],lwd=2)
abline(a=0,b=1,lty=5)
plot(fracCresp[,1],fracCrespNE[,1],type='l',xlim=c(0,1),ylim=c(0,1),xlab="fraction decomposed - With evaporation",ylab="fraction decomposed - No evaporation",lwd=2,col='grey')
arrows(x0=fracCresp[(nrow(fracCresp)-50),1],y0=fracCrespNE[(nrow(fracCrespNE)-50),1],x1=fracCresp[nrow(fracCresp),1],y1=fracCrespNE[nrow(fracCrespNE),1],lwd=2,col='grey')
lines(fracCresp[,15],fracCrespNE[,15],lwd=2)
arrows(x0=fracCresp[(nrow(fracCresp)-50),15],y0=fracCrespNE[(nrow(fracCrespNE)-50),15],x1=fracCresp[nrow(fracCresp),15],y1=fracCrespNE[nrow(fracCrespNE),15],lwd=2)
abline(a=0,b=1,lty=5)
plot(WA2LAs,respirationVol[,1],type='l',xlab="WA:LA",ylab="volumetric respiration (mg C m-3 day-1)",ylim=c(0,max(respirationVol)),lwd=2,col='grey90')
lines(WA2LAs,respirationVol[,2],col='grey70',lwd=2)
lines(WA2LAs,respirationVol[,5],col='grey55',lwd=2)
lines(WA2LAs,respirationVol[,10],col='grey40',lwd=2)
lines(WA2LAs,respirationVol[,15],lwd=2)
legend('bottomright',legend=c(1,2,5,10,15),lty=1,col=c('grey90','grey70','grey55','grey40','black'),box.lty=0)
text(900,0.006,'mean depth (m)',font=4)
plot(WA2LAs,fracCresp[,1],type='l',xlab="WA:LA",ylab="fraction C load respired",ylim=c(0,1),lwd=2,col='grey90')
lines(WA2LAs,fracCresp[,2],col='grey70',lwd=2)
lines(WA2LAs,fracCresp[,5],col='grey55',lwd=2)
lines(WA2LAs,fracCresp[,10],col='grey40',lwd=2)
lines(WA2LAs,fracCresp[,15],lwd=2)
legend('topright',legend=c(1,2,5,10,15),lty=1,col=c('grey90','grey70','grey55','grey40','black'),box.lty=0)
plot(respirationVol[,1],fracCresp[,1],xlab="Volumetric respiration (g C m-3 day-1)",ylab="fraction C load respired",xlim=c(0,0.025),ylim=c(0,1),type='l',lwd=2,col='grey90')	#zbar=1
lines(respirationVol[,2],fracCresp[,2],lwd=2,col='grey70')	#zbar=2
lines(respirationVol[,5],fracCresp[,5],lwd=2,col='grey55')	#zbar=5
lines(respirationVol[,10],fracCresp[,10],lwd=2,col='grey40')	#zbar=10
lines(respirationVol[,15],fracCresp[,15],lwd=2)	#zbar=15
legend('bottomleft',legend=c(1,2,5,10,15),lty=1,col=c('grey90','grey70','grey55','grey40','black'),box.lty=0)
text(0.002,0.26,'mean depth (m)',font=4)
plot(RT[1,],fracCresp[1,],type='l',xlim=c(1,10000),ylim=c(0,1),xlab="residence time (days)",ylab="fraction C load decomposed",lwd=2,log="x",col='black')	#WA2LA=0.5
lines(RT[2,],fracCresp[2,],lwd=2,col='purple')	#WA2LA=1
lines(RT[4,],fracCresp[4,],lwd=2,col='blue')	#WA2LA=2
lines(RT[10,],fracCresp[10,],lwd=2,col='darkgreen')	#WA2LA=5
lines(RT[20,],fracCresp[20,],lwd=2,col='green')	#WA2LA=10
lines(RT[100,],fracCresp[100,],lwd=2,col='yellow')	#WA2LA=50
lines(RT[200,],fracCresp[200,],lwd=2,col='orange')	#WA2LA=100
lines(RT[1000,],fracCresp[1000,],lwd=2,col='pink')	#WA2LA=500
lines(RT[2000,],fracCresp[2000,],lwd=2,col='red')	#WA2LA=1000
legend('topleft',c('DR=0.5','DR=1','DR=2','DR=5','DR=10','DR=50','DR=100','DR=500','DR=1000'),lty=1,col=c('black','purple','blue','darkgreen','green','yellow','orange','pink','red'),box.lty=0)
par(mfrow=c(1,2))
plot(DOCins,respirationVol3[1,,1],type='l',xlab="Inlet [DOC] (g C m-3)",ylab="volumetric respiration (g C m-3 day-1)",ylim=c(0,max(respirationVol3)),col='black',main="mean depth=1 m")
lines(DOCins,respirationVol3[2,,1],col='purple')
lines(DOCins,respirationVol3[4,,1],col='blue')
lines(DOCins,respirationVol3[10,,1],col='darkgreen')
lines(DOCins,respirationVol3[20,,1],col='green')
lines(DOCins,respirationVol3[100,,1],col='yellow')
lines(DOCins,respirationVol3[200,,1],col='orange')
lines(DOCins,respirationVol3[1000,,1],col='pink')
lines(DOCins,respirationVol3[2000,,1],col='red')
plot(DOCins,respirationVol3[1,,15],type='l',xlab="Inlet [DOC] (g C m-3)",ylab="volumetric respiration (g C m-3 day-1)",ylim=c(0,max(respirationVol3)),col='black',main="mean depth=15 m")
lines(DOCins,respirationVol3[2,,15],col='purple')
lines(DOCins,respirationVol3[4,,15],col='blue')
lines(DOCins,respirationVol3[10,,15],col='darkgreen')
lines(DOCins,respirationVol3[20,,15],col='green')
lines(DOCins,respirationVol3[100,,15],col='yellow')
lines(DOCins,respirationVol3[200,,15],col='orange')
lines(DOCins,respirationVol3[1000,,15],col='pink')
lines(DOCins,respirationVol3[2000,,15],col='red')
par(mfrow=c(1,2))
plot(fLs,respirationVol3q[1,,1],type='l',xlab="fraction of inlet C that is labile",ylab="volumetric respiration (g C m-3 day-1)",ylim=c(0,max(respirationVol3q)),col='black',main="mean depth=1 m")
lines(fLs,respirationVol3q[2,,1],col='purple')
lines(fLs,respirationVol3q[4,,1],col='blue')
lines(fLs,respirationVol3q[10,,1],col='darkgreen')
lines(fLs,respirationVol3q[20,,1],col='green')
lines(fLs,respirationVol3q[100,,1],col='yellow')
lines(fLs,respirationVol3q[200,,1],col='orange')
lines(fLs,respirationVol3q[1000,,1],col='pink')
lines(fLs,respirationVol3q[2000,,1],col='red')
plot(fLs,respirationVol3q[1,,15],type='l',xlab="fraction of inlet C that is labile",ylab="volumetric respiration (g C m-3 day-1)",ylim=c(0,max(respirationVol3q)),col='black',main="mean depth=15 m")
lines(fLs,respirationVol3q[2,,15],col='purple')
lines(fLs,respirationVol3q[4,,15],col='blue')
lines(fLs,respirationVol3q[10,,15],col='darkgreen')
lines(fLs,respirationVol3q[20,,15],col='green')
lines(fLs,respirationVol3q[100,,15],col='yellow')
lines(fLs,respirationVol3q[200,,15],col='orange')
lines(fLs,respirationVol3q[1000,,15],col='pink')
lines(fLs,respirationVol3q[2000,,15],col='red')
par(mfrow=c(1,2))
plot(fLs,fracCresp3q[1,,1],type='l',xlab="fraction of inlet C that is labile",ylab="fracion DOC load decomposed",ylim=c(0,1),col='black',main="mean depth=1 m")
lines(fLs,fracCresp3q[2,,1],col='purple')
lines(fLs,fracCresp3q[4,,1],col='blue')
lines(fLs,fracCresp3q[10,,1],col='darkgreen')
lines(fLs,fracCresp3q[20,,1],col='green')
lines(fLs,fracCresp3q[100,,1],col='yellow')
lines(fLs,fracCresp3q[200,,1],col='orange')
lines(fLs,fracCresp3q[1000,,1],col='pink')
lines(fLs,fracCresp3q[2000,,1],col='red')
plot(fLs,fracCresp3q[1,,15],type='l',xlab="fraction of inlet C that is labile",ylab="fracion DOC load decomposed",ylim=c(0,1),col='black',main="mean depth=15 m")
lines(fLs,fracCresp3q[2,,15],col='purple')
lines(fLs,fracCresp3q[4,,15],col='blue')
lines(fLs,fracCresp3q[10,,15],col='darkgreen')
lines(fLs,fracCresp3q[20,,15],col='green')
lines(fLs,fracCresp3q[100,,15],col='yellow')
lines(fLs,fracCresp3q[200,,15],col='orange')
lines(fLs,fracCresp3q[1000,,15],col='pink')
lines(fLs,fracCresp3q[2000,,15],col='red')
d3q=respirationVol3q/equilC3q
par(mfrow=c(1,2))
plot(fLs,d3q[1,,1],type='l',xlab="fraction of inlet C that is labile",ylab="emergent d (day-1)",ylim=c(0.005,max(d3q)),col='black',main="mean depth=1 m")
lines(fLs,d3q[2,,1],col='purple')
lines(fLs,d3q[4,,1],col='blue')
lines(fLs,d3q[10,,1],col='darkgreen')
lines(fLs,d3q[20,,1],col='green')
lines(fLs,d3q[100,,1],col='yellow')
lines(fLs,d3q[200,,1],col='orange')
lines(fLs,d3q[1000,,1],col='pink')
lines(fLs,d3q[2000,,1],col='red')
plot(fLs,d3q[1,,15],type='l',xlab="fraction of inlet C that is labile",ylab="emergent d (day-1)",ylim=c(0.005,max(d3q)),col='black',main="mean depth=15 m")
lines(fLs,d3q[2,,15],col='purple')
lines(fLs,d3q[4,,15],col='blue')
lines(fLs,d3q[10,,15],col='darkgreen')
lines(fLs,d3q[20,,15],col='green')
lines(fLs,d3q[100,,15],col='yellow')
lines(fLs,d3q[200,,15],col='orange')
lines(fLs,d3q[1000,,15],col='pink')
lines(fLs,d3q[2000,,15],col='red')
library(ggplot2)
mpg
dim(mpg)
colnames(mpg)
plot(mpg$displ,mpg$cty)
head(mpg)
is.data.frame(mpg)
unique(mpg$fl)
dim(mpg)
mpgB=mpg[,-11]
dim(mpgB)
colnames(mpgB)
mpgB=mpg[,-10]
mpgB=mpg[,-11]
mpgB=mpgB[,-10]
dim(mpgB)
head(mpgB)
unique(mpgB[,1])
getwd()
setwd("~/Documents/Teaching/Intro2Comp/ICB_Fall2017/Lectures/Lecture13")
list.files()
write.table(mpgB,"mpg.txt",row.names=FALSE,sep="\t")
library(ggplot2)
mpg=read.table("mpg.txt",header=TRUE,sep="\t",stringsAsFactors=FALSE)
dim(mpg)
head(mpg)
library(ggplot2)
mpg=read.table("mpg.txt",header=TRUE,sep="\t",stringsAsFactors=FALSE)
dim(mpg)
head(mpg)
ggplot(data=mpg,aes(x=displ,y=cty))+geom_point()+coord_cartesian()+theme_bw()
ggplot(data=mpg,aes(x=displ,y=cty))+geom_point()+coord_cartesian()
ggplot(data=mpg,aes(x=displ,y=cty))+geom_point()+coord_cartesian()+theme_bw()
a=ggplot(data=mpg,aes(x=displ,y=cty))
a=ggplot(data=mpg,aes(x=displ,y=cty))
a+geom_point()+coord_cartesian()
a+geom_point()+coord_cartesian()+theme_bw()
a+geom_point()+coord_cartesian()+theme_classic()
a+geom_point()+coord_cartesian()+theme_minimal()
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")
?geom_point
a+geom_point(color="blue",shape=22)+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")
a+geom_point(color="blue",shape=22,size=2)+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")
a+geom_point(color="blue",shape=22,size=3)+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")+scale_y_log10()
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")
?scale_y_log10
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")+scale_y_log10(limits=c(0.1,100),breaks=c(0.1,1,10,100))
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")+scale_y_log10(limits=c(1,100),breaks=c(1,10,100))
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")+stat_smooth()
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")+stat_lm()
?stat_smooth
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")+stat_smooth(method="lm")
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")+stat_smooth(method="loess")
colnames(mpg)
b=ggplot(data=mpg, x=hwy)
b+geom_histogram()
b+geom_histogram()+stat_bin()
b=ggplot(data=mpg, x=hwy)
b
b=ggplot(data=mpg)
b+geom_histogram(x=hwy)
b=ggplot(data=mpg,x=hwy)
b+geom_histogram(x=x)
b=ggplot(data=mpg,aes(x=hwy))
b+geom_histogram()
b+geom_histogram()+theme_classic()
?geom_histogram
b+geom_histogram()+theme_classic()+stat_bin(binwidth=5)
?geom_histogram
b+geom_histogram(binwidth=5,color='red')+theme_classic()
b+geom_histogram(binwidth=5,color='red',fill='red')+theme_classic()
b+geom_histogram(binwidth=5,fill='red')+theme_classic()
b+geom_histogram(binwidth=5,fill='red')+theme_classic()
b+geom_histogram(binwidth=5,fill='red',color='black')+theme_classic()
a+geom_point(aes(color=cyl))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")
a+geom_point(aes(color=as.factor(cyl)),color=c('red','green','blue','orange'))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_fill_manual(values=c('red','green','blue','orange'))
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_discrete(values=c('red','green','blue','orange'))
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_manual(values=c('red','green','blue','orange'))
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_manual(values=c('red','green','blue','orange'))+scale_fill_discrete(name=NULL)
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_manual(values=c('red','green','blue','orange'))+scale_fill_discrete(name="")
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_manual(values=c('red','green','blue','orange'))+theme(legend.title=element_blank())
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_manual(values=c('red','green','blue','orange'))+theme(legend.title="cylinders"
# add a linear trendline with a new layer
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")+stat_smooth(method="lm")
# add a spline with a new layer
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")+stat_smooth(method="loess")
### histogram of mpg hwy
b=ggplot(data=mpg,aes(x=hwy))
b+geom_histogram()+theme_classic()
# change bins
b+geom_histogram()+theme_classic()+stat_bin(binwidth=5)
# change bins; the stat_bin is a default for geom_histogram, so it can be skippped
# color can also be specified in the geom_histogram call
b+geom_histogram(binwidth=5,fill='red',color='black')+theme_classic()
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_manual(values=c('red','green','blue','orange'))+theme(legend.title="cylinders"
# add a linear trendline with a new layer
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")+stat_smooth(method="lm")
# add a spline with a new layer
a+geom_point()+theme_classic()+xlab("displacment (l)")+ylab("miles per gallon-city")+stat_smooth(method="loess")
### histogram of mpg hwy
b=ggplot(data=mpg,aes(x=hwy))
b+geom_histogram()+theme_classic()
# change bins
b+geom_histogram()+theme_classic()+stat_bin(binwidth=5)
# change bins; the stat_bin is a default for geom_histogram, so it can be skippped
# color can also be specified in the geom_histogram call
b+geom_histogram(binwidth=5,fill='red',color='black')+theme_classic()
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_manual(values=c('red','green','blue','orange'))+theme(legend.title="cylinders")
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_manual(values=c('red','green','blue','orange'))+theme(legend.title=element_blank())
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_manual(values=c('red','green','blue','orange'))+scale_fill_discrete(name="cylinders")
a+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_manual(values=c('red','green','blue','orange'))+theme(legend.title=element_blank())
b=ggplot(data=mpg,aes(x=hwy))
b+geom_histogram()+theme_classic()
b+geom_histogram()+theme_classic()+stat_bin(binwidth=5)
b+geom_histogram(binwidth=5,fill='red',color='black')+theme_classic()
head(mpg)
unique(mpg$drv)
d=ggplot(data=mpg,aes(drv))
d+geom_bar()
?stat_function
d+geom_bar()+stat_function(aes(y=cty,group=drv),fun=mean)
d+stat_function(aes(y=cty,group=drv),fun=mean)+geom_bar()
?tapply
means=tapply(X=mpg$cty,INDEX=mpg$drv,FUN=mean)
means
d=ggplot(data=means)
d=ggplot(data=mpg)
d+geom_bar(aes(cty,fill=as.factor(drv)),stat="summary",fun.y="mean")
d+geom_bar(aes(y=cty,fill=as.factor(drv)),stat="summary",fun.y="mean")
d+geom_bar(aes(x=as.factor(drv),y=cty),stat="summary",fun.y="mean")
tapply(X=mpg$cty,INDEX=mpg$drv,FUN=mean)
d+geom_bar(aes(x=as.factor(drv),y=cty),stat="summary",fun.y="mean")+theme_classic()
d+geom_bar(aes(x=as.factor(drv),y=cty),stat="summary",fun.y="mean",fill='black',color='black')+theme_classic()
d+geom_bar(aes(x=as.factor(drv),y=cty),stat="summary",fun.y="mean",fill='black',color='black')+theme_classic()+xlab("drive")+ylab("miles per gallon city")
?geom_bar
d=ggplot(data=mpg,aes(x=drv,y=cty))
d+geom_point()
d+geom_point()+geom_jitter()
d+geom_point()+geom_jitter()+theme_classic()
d+geom_point()+geom_jitter(alpha=0.5)+theme_classic()
?geom_jitter
d+geom_point()+geom_jitter(width=0.1)+theme_classic()
colnames(mpg)
f=ggplot(data=mpg,aes(x=displ,y=cty))+geom_point()
f+facet_wrap(~drv)
f+facet_wrap(~drv)+theme_classic()
g=ggplot(data=mpg,aes(x=displ,y=cty))+geom_point(aes(color=as.factor(cyl)))+theme_classic()+xlab("discplacement (l)")+ylab("miles per gallon-city")+scale_color_manual(values=c('red','green','blue','orange'))+theme(legend.title=element_blank())
h=ggplot(data=mpg)+geom_bar(aes(x=as.factor(drv),y=cty),stat="summary",fun.y="mean")+theme_classic()
multiplot(g,h,cols=2)
library(grid)
library(gridExtra)
grid.arrange(g,h,ncol=2)
colnames(mpg)
ggplot(data=mpg,aes(x=displ))+geom_density()
ggplot(data=mpg,aes(x=year,y=hwy))+geom_point()
data=data.frame(region=rep(c('north','east','south','west'),each=100),observations=c(rnorm(100,15,1),rnorm(100,15,5),c(rnorm(50,5,0.5),rnorm(50,25,2)),runif(100,0,30))
)
head(data)
boxplot(data$observations~data$region)
plot(data$observations~data$region)
hist(data$obsevations[data$region=="north"])
hist(data$observations[data$region=="north"])
hist(data$observations[data$region=="south"])
hist(data$observations[data$region=="east"])
hist(data$observations[data$region=="west"])
sum(data$observations<0)
library(ggplot2)
dataplot=ggplot(data=data,aes(x=region,y=observations))
dataplot+geom_point()
data=data.frame(region=rep(c('north','east','south','west'),each=1000),observations=c(rnorm(1000,15,1),rnorm(1000,15,5),c(rnorm(500,5,0.5),rnorm(500,25,2)),runif(1000,0,30)))
sum(data$observations<0)
data$observations[data$observations<0]=0.1
data=data.frame(region=rep(c('north','east','south','west'),each=1000),observations=c(rnorm(1000,15,1),rnorm(1000,15,5),c(rnorm(500,5,0.5),rnorm(500,25,2)),runif(1000,0,30)))
data$observations[data$observations<0]=0.1
library(ggplot2)
dataplot=ggplot(data=data,aes(x=region,y=observations))
dataplot+geom_point()
data_barplot=ggplot(data=mpg)
data_barplot=ggplot(data=data)
data_barplot=ggplot(data=data)
data_barplot+geom_bar(aes(x=as.factor(region),y=observations),stat="summary",fun.y="mean",fill='black',color='black')+theme_classic()+xlab("drive")+ylab("miles per gallon city")
dataplot=ggplot(data=data,aes(x=region,y=observations))
dataplot+geom_point()
rm(list=ls())
data=data.frame(region=rep(c('north','east','south','west'),each=1000),observations=c(rnorm(1000,15,1),rnorm(1000,15,5),c(rnorm(500,5,0.5),rnorm(500,25,2)),runif(1000,0,30)))
data$observations[data$observations<0]=0.1
library(ggplot2)
data_barplot=ggplot(data=data)
data_barplot+geom_bar(aes(x=as.factor(region),y=observations),stat="summary",fun.y="mean",fill='black',color='black')+theme_classic()+xlab("drive")+ylab("miles per gallon city")
data_scatterplot=ggplot(data=data,aes(x=region,y=observations))
data_scatterplot+geom_point()
data_binhex=ggplot(data=data,aes(x=region,y=observations))
data_binhex+geom_point()+stat_binhex()
data_binhex=ggplot(data=data,aes(x=region,y=observations))
data_binhex+stat_binhex()
data_smoothscatter=ggplot(data=data,aes(x=region,y=observations))
?smoothScatter
smoothScatter(data$region,data$observations)
data_density2d=ggplot(data=data,aes(x=region,y=observations))
data_density2d+geom_density2d()
?stat_density2d
data_scatterplot=ggplot(data=data,aes(x=region,y=observations))
data_scatterplot+geom_point()
data_scatterplot=ggplot(data=data,aes(x=region,y=observations))
data_scatterplot+geom_point()
data_scatterplot+geom_point()+geom_jitter(width=0.1)
data_scatterplot=ggplot(data=data,aes(x=region,y=observations))
data_scatterplot+geom_point()
data_scatterplot+geom_point()+geom_jitter(width=0.2)
data_scatterplot=ggplot(data=data,aes(x=region,y=observations))
data_scatterplot+geom_point()
data_scatterplot+geom_point(alpha=0.1)
getwd()
setwd("../../Tutorials/Tutorial7")
setwd("../../Tutorials/Tutorial07")
list.files()
write.table(data,"data.txt",row.names=FALSE,sep=",")
list.files()
data=read.table("data.txt",header=TRUE,sep=",",stringsAsFactors=FALSE)
data_barplot=ggplot(data=data)
data_barplot+geom_bar(aes(x=as.factor(region),y=observations),stat="summary",fun.y="mean",fill='black',color='black')+theme_classic()+xlab("drive")+ylab("miles per gallon city")
data_scatterplot=ggplot(data=data,aes(x=region,y=observations))
data_scatterplot+geom_point()
data_scatterplot+geom_point(alpha=0.1)
data_scatterplot+geom_point()+geom_jitter(width=0.2)
data_binhex=ggplot(data=data,aes(x=region,y=observations))
data_binhex+stat_binhex()
x=runif(25,0,25)
y=rnorm(25,mean=x*2+3,sd=4)
plot(x,)
plot(x,y)
data2=data.frame(x=x,y=y)
plot2=ggplot(data=data2,x=x,y=y)
plot2+geom_point()+stat_smooth(method="lm")
plot2+geom_point()+geom_smooth(method="lm")
plot2=ggplot(data=data2,x=x,y=y)
plot2+geom_point()+geom_smooth(model="lm")
?geom_smooth
plot2=ggplot(data=data2,x=x,y=y)
plot2+geom_point()+geom_smooth(method="lm")
plot2=ggplot(data=data2,x=x,y=y)
plot2+geom_point()
plot2=ggplot(data=data2,aes(x=x,y=y))
plot2+geom_point()+geom_smooth(method="lm")
fasta=scan(file="Lecture11.fasta",what=character())
head(fasta)
summ=matrix(NA,length(fasta)/2,4)
# loop through lines of fasta and process each record
for(i in 1:length(fasta)){
# if-else to figure out if we have a recordID line or sequence line
if(grepl(">",fasta[i])){
summ[((i+1)/2),1]=substr(fasta[i],2,nchar(fasta[i])) # could use counter instead of complicated row calculation
}else{
seqLength=nchar(fasta[i])
numG=nchar(fasta[i])-nchar(gsub("G","",fasta[i]))
numC=nchar(fasta[i])-nchar(gsub("C","",fasta[i]))
if(seqLength<=14){
Tm=2*(numG+numC)+2*seqLength
}else{
Tm=-9999
}
summ[i/2,2]=seqLength
summ[i/2,3]=round((numG+numC)/seqLength*100,1)
summ[i/2,4]=Tm
}
}
seqSumm=data.frame(sequenceID=summ[,1],sequenceLength=as.numeric(summ[,2]),percentGC=as.numeric(summ[,3]),meltingTemp=as.numeric(summ[,4]))
head(seqSumm)
seqLenPlot=ggplot(data=seqSumm,aes(x=sequenceLength))
seqLenPlot+geom_histogram()
GCplot=ggplot(data=seqSumm,aes(x=percentGC))
GCplot+geom_histogram()
